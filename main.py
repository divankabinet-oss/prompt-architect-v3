
import os
import json
import asyncio
import aiosqlite
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties


import json

# ---- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ ----
ACCESS_PATH = os.path.join(os.path.dirname(__file__), "access", "whitelist.json")
with open(ACCESS_PATH, "r", encoding="utf-8") as f:
    WHITELIST = json.load(f)

def has_access(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø"""
    return user_id in WHITELIST.get("allowed", []) or user_id in WHITELIST.get("admin", [])

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in WHITELIST.get("admin", [])


TOKEN = os.getenv("TOKEN")

if not TOKEN:
    raise RuntimeError("TOKEN environment variable is missing. Set it to your Telegram bot token.")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher()

# ---------- Load data ----------
DATA_DIR = os.path.join(os.path.dirname(__file__), "data")
with open(os.path.join(DATA_DIR, "photographers.json"), "r", encoding="utf-8") as f:
    PHOTOGRAPHERS = json.load(f)
with open(os.path.join(DATA_DIR, "lighting.json"), "r", encoding="utf-8") as f:
    LIGHTING = json.load(f)
with open(os.path.join(DATA_DIR, "interiors.json"), "r", encoding="utf-8") as f:
    INTERIORS = json.load(f)
with open(os.path.join(DATA_DIR, "clutter.json"), "r", encoding="utf-8") as f:
    CLUTTER = json.load(f)

# ---------- State ----------
user_state = {}
user_lang = {}

# ---------- DB ----------
DB_PATH = os.path.join(os.path.dirname(__file__), "database", "users.db")

async def init_db():
    os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS prompts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                username TEXT,
                prompt TEXT,
                created TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        await db.commit()

# ---------- Commands ----------
@dp.message(CommandStart())
async def cmd_start(msg: Message):

    if not has_access(msg.from_user.id):
        kb = InlineKeyboardBuilder()
        kb.button(text="–û—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç—É–ø", url="https://t.me/XY_ACADEMY")
        await msg.answer(
            "üö´ –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ @XY_ACADEMY PRO",
            reply_markup=kb.as_markup()
        )
        return

    user_lang[msg.from_user.id] = "ru"
    kb = InlineKeyboardBuilder()
    kb.button(text="üé® –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="create")
    kb.button(text="üåê Language / –Ø–∑—ã–∫", callback_data="lang")
    kb.button(text="üóÇ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")
    kb.button(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="export")
    kb.adjust(2)
    await msg.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø *Prompt Architect AI.*\n\n–°–æ–∑–¥–∞—é –∏–¥–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.as_markup()
    )

@dp.message(Command("language"))
async def cmd_language(msg: Message):
    await choose_lang(CallbackQuery(id="0", from_user=msg.from_user, message=msg, data="lang"))

@dp.callback_query(F.data == "lang")
async def choose_lang(c: CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_ru")
    kb.button(text="üá¨üáß English", callback_data="set_en")
    await c.message.answer("–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ / Choose language:", reply_markup=kb.as_markup())

@dp.callback_query(F.data == "set_ru")
async def set_ru(c: CallbackQuery):
    user_lang[c.from_user.id] = "ru"
    await c.message.answer("‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: *–†—É—Å—Å–∫–∏–π*")

@dp.callback_query(F.data == "set_en")
async def set_en(c: CallbackQuery):
    user_lang[c.from_user.id] = "en"
    await c.message.answer("‚úÖ Language set: *English*")

# ---------- Constructor flow ----------
@dp.callback_query(F.data == "create")
async def start_constructor(c: CallbackQuery):
    user_state[c.from_user.id] = {}
    kb = InlineKeyboardBuilder()
    for platform in ["Midjourney", "Seedream", "RealRender", "Nanobanana"]:
        kb.button(text=platform, callback_data=f"platform_{platform}")
    await c.message.answer("üîπ –í—ã–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("platform_"))
async def choose_platform(c: CallbackQuery):
    platform = c.data.split("_", 1)[1]
    user_state[c.from_user.id]["platform"] = platform
    kb = InlineKeyboardBuilder()
    for k in INTERIORS:
        kb.button(text=k, callback_data=f"interior_{k}")
    await c.message.answer("üè† –í—ã–±–µ—Ä–∏ —Ç–∏–ø –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞:", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("interior_"))
async def choose_interior(c: CallbackQuery):
    inter = c.data.split("_", 1)[1]
    user_state[c.from_user.id]["interior"] = inter
    kb = InlineKeyboardBuilder()
    for k in PHOTOGRAPHERS:
        kb.button(text=k, callback_data=f"photo_{k}")
    await c.message.answer("üì∑ –í—ã–±–µ—Ä–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ / —Å—Ç–∏–ª—å:", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("photo_"))
async def choose_photo(c: CallbackQuery):
    ph = c.data.split("_", 1)[1]
    user_state[c.from_user.id]["photographer"] = ph
    kb = InlineKeyboardBuilder()
    for k in LIGHTING:
        kb.button(text=k, callback_data=f"light_{k}")
    await c.message.answer("üí° –í—ã–±–µ—Ä–∏ –æ—Å–≤–µ—â–µ–Ω–∏–µ:", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("light_"))
async def choose_light(c: CallbackQuery):
    lt = c.data.split("_", 1)[1]
    user_state[c.from_user.id]["lighting"] = lt
    kb = InlineKeyboardBuilder()
    for k in ["Slightly imperfect handheld", "Centered cinematic", "Wide architectural", "Close magazine frame"]:
        kb.button(text=k, callback_data=f"angle_{k}")
    await c.message.answer("üé• –í—ã–±–µ—Ä–∏ —Ä–∞–∫—É—Ä—Å –∫–∞–º–µ—Ä—ã:", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("angle_"))
async def choose_angle(c: CallbackQuery):
    angle = c.data.split("_", 1)[1]
    user_state[c.from_user.id]["angle"] = angle
    kb = InlineKeyboardBuilder()
    kb.button(text="üö´ –ë–µ–∑ –±–µ—Å–ø–æ—Ä—è–¥–∫–∞", callback_data="clutter_none")
    kb.button(text="‚ú® –õ—ë–≥–∫–∏–π –±–µ—Å–ø–æ—Ä—è–¥–æ–∫", callback_data="clutter_light")
    await c.message.answer("‚ú® –î–æ–±–∞–≤–∏—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –±–µ—Å–ø–æ—Ä—è–¥–æ–∫?", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("clutter_"))
async def choose_clutter(c: CallbackQuery):
    uid = c.from_user.id
    choice = c.data.split("_", 1)[1]
    user_state[uid]["clutter"] = choice
    await generate_prompt(c)

# ---------- Generate, save, translate ----------
async def generate_prompt(c: CallbackQuery):
    data = user_state.get(c.from_user.id, {})
    inter_desc = INTERIORS[data["interior"]]
    ph_data = PHOTOGRAPHERS[data["photographer"]]
    lt_data = LIGHTING[data["lighting"]]
    platform = data["platform"]
    angle = data["angle"]
    clutter_text = CLUTTER["light"] if data.get("clutter") == "light" else ""

    geometry_line = "" if platform == "Nanobanana" else "Geometry of the room, furniture and lighting fixtures remain unchanged."

    prompt = f"""Photo of {inter_desc}.
In the style of {data['photographer']} ‚Äî {ph_data}.
{lt_data}.
Camera angle {angle}.
{clutter_text}
{geometry_line}
Photorealistic, ultra detailed, architectural magazine style."""

    # Save to DB
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO prompts (user_id, username, prompt) VALUES (?, ?, ?)",
            (c.from_user.id, c.from_user.username, prompt)
        )
        await db.commit()

    # Action buttons
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏", callback_data=f"translate_{c.from_user.id}")],
        [InlineKeyboardButton(text="üóÇ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history"),
         InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="export")]
    ])

    # Monospaced code block
    await c.message.answer(f"‚úÖ *–ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç:*\n```{prompt}```", reply_markup=kb)

@dp.callback_query(F.data.startswith("translate_"))
async def translate_prompt(c: CallbackQuery):
    # Simple RU translation boilerplate (short summary + instruction to copy)
    await c.message.answer(
        "üîÅ *–ö—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ / —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:*\n"
        "‚Äî –§–æ—Ç–æ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞\n"
        "‚Äî –¢–∏–ø –æ—Å–≤–µ—â–µ–Ω–∏—è\n"
        "‚Äî –†–∞–∫—É—Ä—Å –∫–∞–º–µ—Ä—ã\n"
        "‚Äî (–æ–ø—Ü.) –õ—ë–≥–∫–∏–π ¬´–æ–±–∂–∏—Ç—ã–π¬ª –±–µ—Å–ø–æ—Ä—è–¥–æ–∫\n"
        "‚Äî –§—Ä–∞–∑–∞ –æ –Ω–µ–∏–∑–º–µ–Ω–Ω–æ—Å—Ç–∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏/–º–µ–±–µ–ª–∏/—Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤ (–∫—Ä–æ–º–µ Nanobanana)\n\n"
        "_–°–∫–æ–ø–∏—Ä—É–π –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–π –±–ª–æ–∫ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä (–æ–Ω –≤—ã—à–µ, –≤ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)._"
    )

# ---------- History & Export ----------
@dp.callback_query(F.data == "history")
async def history_menu(c: CallbackQuery):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT prompt, created FROM prompts WHERE user_id=? ORDER BY id DESC LIMIT 5", (c.from_user.id,)) as cur:
            rows = await cur.fetchall()
    if not rows:
        await c.message.answer("üìÇ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return
    text = "\n\n".join([f"üïì {r[1]}\n```{r[0]}```" for r in rows])
    await c.message.answer(f"üóÇ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–º–ø—Ç—ã:*\n{text}")

@dp.callback_query(F.data == "export")
async def export_history(c: CallbackQuery):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT created, prompt FROM prompts WHERE user_id=? ORDER BY id DESC", (c.from_user.id,)) as cur:
            rows = await cur.fetchall()
    if not rows:
        await c.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return
    # Build text file content
    lines = []
    for created, prompt in rows:
        lines.append(f"=== {created} ===\n{prompt}\n")
    content = "\n".join(lines)
    path = os.path.join(os.path.dirname(DB_PATH), f"prompts_{c.from_user.id}.txt")
    with open(path, "w", encoding="utf-8") as f:
        f.write(content)
    await c.message.answer_document(FSInputFile(path), caption="üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤")

# =======================
# üîß –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
# =======================
@dp.message(Command("adduser"))
async def add_user(msg: Message):
    if not is_admin(msg.from_user.id):
        return
    try:
        new_id = int(msg.text.split()[1])
        if new_id not in WHITELIST["allowed"]:
            WHITELIST["allowed"].append(new_id)
            with open(ACCESS_PATH, "w", encoding="utf-8") as f:
                json.dump(WHITELIST, f, ensure_ascii=False, indent=2)
            await msg.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ whitelist.")
    except Exception:
        await msg.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /adduser <id>")

@dp.message(Command("removeuser"))
async def remove_user(msg: Message):
    if not is_admin(msg.from_user.id):
        return
    try:
        rem_id = int(msg.text.split()[1])
        if rem_id in WHITELIST["allowed"]:
            WHITELIST["allowed"].remove(rem_id)
            with open(ACCESS_PATH, "w", encoding="utf-8") as f:
                json.dump(WHITELIST, f, ensure_ascii=False, indent=2)
            await msg.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {rem_id} —É–¥–∞–ª—ë–Ω –∏–∑ whitelist.")
    except Exception:
        await msg.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /removeuser <id>")

@dp.message(Command("users"))
async def list_users(msg: Message):
    if not is_admin(msg.from_user.id):
        return
    users = WHITELIST.get("allowed", [])
    admins = WHITELIST.get("admin", [])
    text = "üëë –ê–¥–º–∏–Ω—ã:\n" + "\n".join([str(a) for a in admins]) + "\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join([str(u) for u in users])
    await msg.answer(text)

@dp.message(Command("broadcast"))
async def broadcast(msg: Message):
    if not is_admin(msg.from_user.id):
        return
    text = msg.text.replace("/broadcast", "").strip()
    if not text:
        await msg.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /broadcast <—Ç–µ–∫—Å—Ç>")
        return
    count = 0
    for uid in WHITELIST.get("allowed", []):
        try:
            await bot.send_message(uid, f"üì¢ {text}")
            count += 1
        except:
            pass
    await msg.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ({count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π).")


# ---------- Run ----------
async def main():
    await init_db()
    print("‚úÖ Prompt Architect v3 is running.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
